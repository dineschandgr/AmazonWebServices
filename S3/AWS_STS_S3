package com.amazonaws.samples;

import java.io.File;
import java.io.IOException;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest;
import com.amazonaws.services.securitytoken.model.AssumeRoleResult;
import com.amazonaws.services.securitytoken.model.Credentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicSessionCredentials;

public class AWS_S3_STS_Same_Accont {
	 public static void main(String[] args) throws IOException {
		 
		    //name of bucket in S3
	        String bucketName = "xxxxx"; //provide bucket name
	        String stringObjKeyName = "test";
	        String fileObjKeyName = "test1";
	        String fileName = "D:/AWS/attachments/AWS Certified Developer Slides 2.0.pdf";
	        System.out.println("before upload");
	        try {
	            //This code expects that you have AWS credentials set up per:
	            // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
	        	
	        	String roleARN = "yyyy"; //provide ARN of Role to be assumed 
	        	String clientRegion = "ap-southeast-1"; // your region
	        	
	        	
	        	 AWSSecurityTokenService stsClient = AWSSecurityTokenServiceClientBuilder.standard()
                 .withCredentials(new ProfileCredentialsProvider())
                 .withRegion(clientRegion)
                 .build();

				// Obtain credentials for the IAM role. Note that you cannot assume the role of an AWS root account;
				// Amazon S3 will deny access. You must use credentials for an IAM user or an IAM role.
				AssumeRoleRequest roleRequest = new AssumeRoleRequest()
				                 .withRoleArn(roleARN)
				                 .withRoleSessionName("s3STSSession");
				AssumeRoleResult roleResponse = stsClient.assumeRole(roleRequest);
				Credentials sessionCredentials = roleResponse.getCredentials();
				System.out.println(sessionCredentials);
				
				BasicSessionCredentials awsCredentials = new BasicSessionCredentials(
		                    sessionCredentials.getAccessKeyId(),
		                    sessionCredentials.getSecretAccessKey(),
		                    sessionCredentials.getSessionToken());
				
				AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                        .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                        .withRegion(clientRegion)
                        .build(); 
						
						
	            //s3Client.createBucket(bucketName);
	            // Upload a text s";tring as a new object.
	            s3Client.putObject(bucketName, stringObjKeyName, "Uploaded String Object");

	            // Upload a file as a new object with ContentType and title specified.
	            PutObjectRequest request = new PutObjectRequest(bucketName, fileObjKeyName, new File(fileName));
	            ObjectMetadata metadata = new ObjectMetadata();
	            metadata.setContentType("plain/text");
	            metadata.addUserMetadata("x-amz-meta-title", "someTitle");
	            request.setMetadata(metadata);
	            s3Client.putObject(request);
	            System.out.println("done");
	        } catch (AmazonServiceException e) {
	            // The call was transmitted successfully, but Amazon S3 couldn't process 
	            // it, so it returned an error response.
	            e.printStackTrace();
	        } catch (SdkClientException e) {
	            // Amazon S3 couldn't be contacted for a response, or the client
	            // couldn't parse the response from Amazon S3.
	            e.printStackTrace();
	        }
	 }
}
