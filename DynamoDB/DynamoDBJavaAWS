package com.amazonaws.samples;

import java.util.HashMap;
import java.util.Map;

import com.amazonaws.AmazonClientException;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.util.TableUtils;

public class DynamoDBJavaAWS {

	 
     static String tableName = "MyFirstTableinAWSFromJava";
     static AmazonDynamoDB dynamoDB;
     
     private static void init() throws Exception {
         /*
          * The ProfileCredentialsProvider will return your [default]
          * credential profile by reading from the credentials file located at
          * (C:\\Users\\User\\.aws\\credentials).
          */
    	 ProfileCredentialsProvider credentialsProvider = new ProfileCredentialsProvider();
         try {
             credentialsProvider.getCredentials();
         } catch (Exception e) {
             throw new AmazonClientException(
                     "Cannot load the credentials from the credential profiles file. " +
                     "Please make sure that your credentials file is at the correct " +
                     "location (C:\\Users\\User\\.aws\\credentials), and is in valid format.",
                     e);
         }
         dynamoDB = AmazonDynamoDBClientBuilder.standard()
             .withCredentials(credentialsProvider)
             .withRegion("ap-southeast-1")
             .build();
     }
	
	public static void main(String[] args) {
		try {
			init();
			
			//createTable();
			
			//createItem();
			//updateItem();
			//retrieveItem();
			deleteItem();


		} catch (Exception e) {
			System.err.println("An error occurred: ");
			System.err.println(e.getMessage());
		}
		
	}
		private static void createTable() throws InterruptedException{

			System.out.println("Attempting to create table; please wait...");
			CreateTableRequest createTableRequest = new CreateTableRequest().withTableName(tableName)
	                .withKeySchema(new KeySchemaElement().withAttributeName("user_id").withKeyType(KeyType.HASH))
	                .withAttributeDefinitions(new AttributeDefinition().withAttributeName("user_id").withAttributeType(ScalarAttributeType.S))
	                .withProvisionedThroughput(new ProvisionedThroughput().withReadCapacityUnits(1L).withWriteCapacityUnits(1L));
					// key
			
			   // Create table if it does not exist yet
            TableUtils.createTableIfNotExists(dynamoDB, createTableRequest);
            // wait for the table to move into ACTIVE state
            TableUtils.waitUntilActive(dynamoDB, tableName);

            // Describe our new table
            DescribeTableRequest describeTableRequest = new DescribeTableRequest().withTableName(tableName);
            TableDescription tableDescription = dynamoDB.describeTable(describeTableRequest).getTable();
            System.out.println("Table Description: " + tableDescription);

		}
		
		//To write items to Table using putItem API
		private static void createItem() throws InterruptedException{

			Map<String, AttributeValue> item = newItem("1", 1988, "dinesh", "chand");
            PutItemRequest putItemRequest = new PutItemRequest(tableName, item);
            PutItemResult putItemResult = dynamoDB.putItem(putItemRequest);
            System.out.println("Result: " + putItemResult);

            // Add another item
        	item = newItem("2", 1988, "gayathri", "dc");
            putItemRequest = new PutItemRequest(tableName, item);
            putItemResult = dynamoDB.putItem(putItemRequest);
            System.out.println("createItem Result: " + putItemResult);
		}
		
		   private static Map<String, AttributeValue> newItem(String user_id, int year, String first_name, String last_name) {
		        Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
		        item.put("user_id", new AttributeValue(user_id));
		        item.put("year", new AttributeValue().withN(Integer.toString(year)));
		        item.put("first_name", new AttributeValue(first_name));
		        item.put("last_name", new AttributeValue().withSS(last_name));

		        return item;
		    }
		
		private static void retrieveItem() {
			  HashMap<String, Condition> scanFilter = new HashMap<String, Condition>();
	            Condition condition = new Condition()
	                .withComparisonOperator(ComparisonOperator.EQ.toString())
	                .withAttributeValueList(new AttributeValue().withN("1988"));
	            scanFilter.put("year", condition);
	            ScanRequest scanRequest = new ScanRequest(tableName).withScanFilter(scanFilter);
	            ScanResult scanResult = dynamoDB.scan(scanRequest);
	            System.out.println("retrieveItem Result: " + scanResult);
	}
	
		  /* private static void updateItem() { 
			      Table table = dynamoDB.getTable(tableName);  
			      try {  
			    	  
			    	  UpdateItemSpec updateItemSpec = new UpdateItemSpec()
			    	            .withPrimaryKey(new PrimaryKey("year", year, "title", title)).withUpdateExpression("remove info.actors[0]")
			    	            .withConditionExpression("size(info.actors) > :num").withValueMap(new ValueMap().withNumber(":num", 3))
			    	            .withReturnValues(ReturnValue.UPDATED_NEW);
			         
			         // Confirm 
			         System.out.println("Displaying updated item..."); 
			         System.out.println(outcome.getItem().toJSONPretty());             
			      } catch (Exception e) { 
			         System.err.println("Cannot add an attribute in " + tableName); 
			         System.err.println(e.getMessage()); 
			      }         
		   }*/
		   
		   private static void deleteItem() { 
			     Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
			        item.put("user_id", new AttributeValue("1"));
			   dynamoDB.deleteItem(tableName, item);
			   System.out.println("item deleted");
		   }
	}

